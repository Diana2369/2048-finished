{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $a5fd07fa01589658$exports = {};\n'use strict';\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = null){\n        this.size = 4;\n        this.score = 0;\n        this.status = 'idle';\n        this.board = initialState ? this.cloneBoard(initialState) : this.createEmptyBoard();\n    }\n    createEmptyBoard() {\n        return Array.from({\n            length: this.size\n        }, ()=>Array(this.size).fill(0));\n    }\n    cloneBoard(board) {\n        return board.map((row)=>[\n                ...row\n            ]);\n    }\n    getState() {\n        return this.cloneBoard(this.board);\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        if (this.status === 'idle') {\n            this.status = 'playing';\n            if (this.isBoardEmpty()) {\n                this.addRandomTile();\n                this.addRandomTile();\n            }\n        }\n    }\n    restart() {\n        this.score = 0;\n        this.status = 'playing';\n        this.board = this.createEmptyBoard();\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    isBoardEmpty() {\n        for(let i = 0; i < this.size; i++)for(let j = 0; j < this.size; j++){\n            if (this.board[i][j] !== 0) return false;\n        }\n        return true;\n    }\n    moveLeft() {\n        this.makeMove(this.mergeRowLeft.bind(this));\n    }\n    moveRight() {\n        this.makeMove((row)=>this.mergeRowLeft(row.reverse()).reverse());\n    }\n    moveUp() {\n        this.transpose();\n        this.moveLeft();\n        this.transpose();\n    }\n    moveDown() {\n        this.transpose();\n        this.moveRight();\n        this.transpose();\n    }\n    makeMove(transformFn) {\n        const oldBoard = JSON.stringify(this.board);\n        for(let i = 0; i < this.size; i++)this.board[i] = transformFn(this.board[i]);\n        const newBoard = JSON.stringify(this.board);\n        if (newBoard !== oldBoard) {\n            this.addRandomTile();\n            this.checkGameStatus();\n        }\n    }\n    mergeRowLeft(row) {\n        const newRow = row.filter((val)=>val !== 0);\n        for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n            newRow[i] *= 2;\n            this.score += newRow[i];\n            newRow[i + 1] = 0;\n        }\n        return newRow.filter((val)=>val !== 0).concat(Array(this.size).fill(0)).slice(0, this.size);\n    }\n    transpose() {\n        const newBoard = this.createEmptyBoard();\n        for(let i = 0; i < this.size; i++)for(let j = 0; j < this.size; j++)newBoard[j][i] = this.board[i][j];\n        this.board = newBoard;\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let i = 0; i < this.size; i++){\n            for(let j = 0; j < this.size; j++)if (this.board[i][j] === 0) emptyCells.push([\n                i,\n                j\n            ]);\n        }\n        if (emptyCells.length === 0) return;\n        const [x, y] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n    }\n    checkGameStatus() {\n        if (this.board.some((row)=>row.includes(2048))) this.status = 'win';\n        else if (!this.canMove()) this.status = 'lose';\n    }\n    canMove() {\n        for(let i = 0; i < this.size; i++)for(let j = 0; j < this.size; j++){\n            const val = this.board[i][j];\n            if (val === 0) return true;\n            if (j < this.size - 1 && val === this.board[i][j + 1]) return true;\n            if (i < this.size - 1 && val === this.board[i + 1][j]) return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports)))();\nconst $09e991522ca7e64e$var$cells = document.querySelectorAll('.field-cell');\nconst $09e991522ca7e64e$var$startButton = document.querySelector('.start');\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector('.game-score');\nconst $09e991522ca7e64e$var$winMessage = document.querySelector('.message-win');\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector('.message-lose');\nconst $09e991522ca7e64e$var$startMessage = document.querySelector('.message-start');\n$09e991522ca7e64e$var$startButton.addEventListener('click', ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === 'idle') $09e991522ca7e64e$var$startGame();\n    else $09e991522ca7e64e$var$restartGame();\n});\nfunction $09e991522ca7e64e$var$updateUI() {\n    const board = $09e991522ca7e64e$var$game.getState();\n    $09e991522ca7e64e$var$cells.forEach((cell, index)=>{\n        const row = Math.floor(index / 4);\n        const col = index % 4;\n        const value = board[row][col];\n        cell.textContent = value === 0 ? '' : value;\n        cell.className = 'field-cell';\n        if (value) {\n            cell.classList.add(`field-cell--${value}`);\n            cell.classList.add('field-cell--merged');\n            setTimeout(()=>cell.classList.remove('field-cell--merged'), 150);\n        }\n    });\n    $09e991522ca7e64e$var$scoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$winMessage.classList.toggle('hidden', $09e991522ca7e64e$var$game.getStatus() !== 'win');\n    $09e991522ca7e64e$var$loseMessage.classList.toggle('hidden', $09e991522ca7e64e$var$game.getStatus() !== 'lose');\n}\nfunction $09e991522ca7e64e$var$startGame() {\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$startMessage.classList.add('hidden');\n    $09e991522ca7e64e$var$startButton.textContent = 'Restart';\n    $09e991522ca7e64e$var$startButton.classList.remove('start');\n    $09e991522ca7e64e$var$startButton.classList.add('restart');\n    $09e991522ca7e64e$var$updateUI();\n}\nfunction $09e991522ca7e64e$var$restartGame() {\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$startMessage.classList.add('hidden');\n    $09e991522ca7e64e$var$winMessage.classList.add('hidden');\n    $09e991522ca7e64e$var$loseMessage.classList.add('hidden');\n    $09e991522ca7e64e$var$updateUI();\n}\ndocument.addEventListener('keydown', (e)=>{\n    const key = e.key;\n    const prevState = JSON.stringify($09e991522ca7e64e$var$game.getState());\n    switch(key){\n        case 'ArrowLeft':\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case 'ArrowRight':\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case 'ArrowUp':\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case 'ArrowDown':\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    if (JSON.stringify($09e991522ca7e64e$var$game.getState()) !== prevState) $09e991522ca7e64e$var$updateUI();\n});\n\n\n//# sourceMappingURL=2048-finished.cbdf3934.js.map\n","import Game from '../modules/Game.class.js';\n\nconst game = new Game();\n\nconst cells = document.querySelectorAll('.field-cell');\nconst startButton = document.querySelector('.start');\nconst scoreElement = document.querySelector('.game-score');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst startMessage = document.querySelector('.message-start');\n\nstartButton.addEventListener('click', () => {\n  if (game.getStatus() === 'idle') {\n    startGame();\n  } else {\n    restartGame();\n  }\n});\n\nfunction updateUI() {\n  const board = game.getState();\n\n  cells.forEach((cell, index) => {\n    const row = Math.floor(index / 4);\n    const col = index % 4;\n    const value = board[row][col];\n\n    cell.textContent = value === 0 ? '' : value;\n    cell.className = 'field-cell';\n\n    if (value) {\n      cell.classList.add(`field-cell--${value}`);\n\n      cell.classList.add('field-cell--merged');\n      setTimeout(() => cell.classList.remove('field-cell--merged'), 150);\n    }\n  });\n\n  scoreElement.textContent = game.getScore();\n\n  winMessage.classList.toggle('hidden', game.getStatus() !== 'win');\n  loseMessage.classList.toggle('hidden', game.getStatus() !== 'lose');\n}\n\nfunction startGame() {\n  game.start();\n  startMessage.classList.add('hidden');\n  startButton.textContent = 'Restart';\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n  updateUI();\n}\n\nfunction restartGame() {\n  game.restart();\n  startMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n  updateUI();\n}\n\ndocument.addEventListener('keydown', (e) => {\n  const key = e.key;\n  const prevState = JSON.stringify(game.getState());\n\n  switch (key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    default:\n      return;\n  }\n\n  if (JSON.stringify(game.getState()) !== prevState) {\n    updateUI();\n  }\n});\n","'use strict';\n\nclass Game {\n  constructor(initialState = null) {\n    this.size = 4;\n    this.score = 0;\n    this.status = 'idle';\n\n    this.board = initialState ? this.cloneBoard(initialState) : this.createEmptyBoard();\n  }\n\n  createEmptyBoard() {\n    return Array.from({ length: this.size }, () => Array(this.size).fill(0));\n  }\n\n  cloneBoard(board) {\n    return board.map((row) => [...row]);\n  }\n\n  getState() {\n    return this.cloneBoard(this.board);\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    if (this.status === 'idle') {\n      this.status = 'playing';\n      if (this.isBoardEmpty()) {\n        this.addRandomTile();\n        this.addRandomTile();\n      }\n    }\n  }\n\n  restart() {\n    this.score = 0;\n    this.status = 'playing';\n    this.board = this.createEmptyBoard();\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  isBoardEmpty() {\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] !== 0) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  moveLeft() {\n    this.makeMove(this.mergeRowLeft.bind(this));\n  }\n\n  moveRight() {\n    this.makeMove((row) => this.mergeRowLeft(row.reverse()).reverse());\n  }\n\n  moveUp() {\n    this.transpose();\n    this.moveLeft();\n    this.transpose();\n  }\n\n  moveDown() {\n    this.transpose();\n    this.moveRight();\n    this.transpose();\n  }\n\n  makeMove(transformFn) {\n    const oldBoard = JSON.stringify(this.board);\n\n    for (let i = 0; i < this.size; i++) {\n      this.board[i] = transformFn(this.board[i]);\n    }\n\n    const newBoard = JSON.stringify(this.board);\n\n    if (newBoard !== oldBoard) {\n      this.addRandomTile();\n      this.checkGameStatus();\n    }\n  }\n\n  mergeRowLeft(row) {\n    const newRow = row.filter((val) => val !== 0);\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        this.score += newRow[i];\n        newRow[i + 1] = 0;\n      }\n    }\n\n    return newRow\n      .filter((val) => val !== 0)\n      .concat(Array(this.size).fill(0))\n      .slice(0, this.size);\n  }\n\n  transpose() {\n    const newBoard = this.createEmptyBoard();\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        newBoard[j][i] = this.board[i][j];\n      }\n    }\n    this.board = newBoard;\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const [x, y] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  checkGameStatus() {\n    if (this.board.some((row) => row.includes(2048))) {\n      this.status = 'win';\n    } else if (!this.canMove()) {\n      this.status = 'lose';\n    }\n  }\n\n  canMove() {\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        const val = this.board[i][j];\n\n        if (val === 0) {\n          return true;\n        }\n\n        if (j < this.size - 1 && val === this.board[i][j + 1]) {\n          return true;\n        }\n\n        if (i < this.size - 1 && val === this.board[i + 1][j]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["a","$09e991522ca7e64e$var$game","initialState","size","score","status","board","cloneBoard","createEmptyBoard","Array","from","length","fill","map","row","getState","getScore","getStatus","start","isBoardEmpty","addRandomTile","restart","i","j","moveLeft","makeMove","mergeRowLeft","bind","moveRight","reverse","moveUp","transpose","moveDown","transformFn","oldBoard","JSON","stringify","checkGameStatus","newRow","filter","val","concat","slice","newBoard","emptyCells","push","x","y","Math","floor","random","some","includes","canMove","__esModule","default","$09e991522ca7e64e$var$cells","document","querySelectorAll","$09e991522ca7e64e$var$startButton","querySelector","$09e991522ca7e64e$var$scoreElement","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$updateUI","forEach","cell","index","value","textContent","className","classList","add","setTimeout","remove","toggle","addEventListener","e","key","prevState"],"version":3,"file":"2048-finished.cbdf3934.js.map"}